@inject IUserService userService
@inject NavigationManager navigationManager
@implements IDisposable

@switch (currentState)
{
    case RegistrationState.Login:
    default:
        <div class="row">
            <EditForm Model="@model" OnValidSubmit="@AttemptLogin">
                <DataAnnotationsValidator />

                <div class="row">
                    <div class="input-field col s6 offset-s3">
                        <InputText class="white-text" type="text" id="username" @bind-Value="model.TwitchUsername"></InputText>
                        <label for="username">Twitch Username</label>
                    </div>
                </div>

                <div class="row">
                    <div class="input-field col s6 offset-s3">
                        <InputText class="white-text" type="password" id="password" @bind-Value="model.Password"></InputText>
                        <label for="password">Password</label>
                    </div>
                </div>

                <p class="red-text center">@ErrorMessage</p>
                <div class="row">
                    <button type="submit" class="waves-effect waves-light btn btn-primary col s6 offset-s3">Sign In</button>
                </div>
                <div class="row">
                    <a class="waves-effect waves-light btn twitch col s6 offset-s3" href="https://id.twitch.tv/oauth2/authorize?client_id=640c899uj9yelwofbsv3a7p0p5leeb&redirect_uri=https://antiharassment.azurewebsites.net/&response_type=code&scope=user:read:email">Login with Twitch</a>
                </div>
            </EditForm>
        </div>

        break;
}

@code {

    private enum RegistrationState
    {
        Registrering,
        Confirming,
        Login,
        RequestReset,
        ResetPassword
    }

    private string ErrorMessage = "";

    private RegistrationState currentState = RegistrationState.Login;

    AuthenticateModel model = new AuthenticateModel();

    private async Task AttemptLogin()
    {
        var success = await userService.TryLogin(model);
        if (!success)
        {
            ErrorMessage = userService.LoginError;
            return;
        }

        model = new AuthenticateModel();
    }

    private void SetCurrentState(RegistrationState value)
    {
        currentState = value;
    }

    RegisterUserModel registerUserModel = new RegisterUserModel();
    private string ConfirmPassword { get; set; }

    private async Task RegisterUser()
    {
        if (string.IsNullOrEmpty(registerUserModel.TwitchUsername) || string.IsNullOrEmpty(registerUserModel.Password))
        {
            return;
        }

        if (!string.Equals(registerUserModel.Password, ConfirmPassword))
        {
            return;
        }

        var accountCreationSuccess = await userService.CreateAccount(registerUserModel);
        if (accountCreationSuccess != true)
        {
            ErrorMessage = userService.CreateAccountError;
            return;
        }

        ConfirmFormModel.ConfirmationUsername = registerUserModel.TwitchUsername;
        registerUserModel = new RegisterUserModel();

        SetCurrentState(RegistrationState.Confirming);
    }

    public class ConfirmForm
    {
        public string ConfirmationUsername { get; set; }
        public string ConfirmationToken { get; set; }
    }

    ConfirmForm ConfirmFormModel = new ConfirmForm();

    private async Task ConfirmCreationToken()
    {
        var success = await userService.ConfirmToken(ConfirmFormModel.ConfirmationUsername, ConfirmFormModel.ConfirmationToken);
        if (!success)
        {
            ErrorMessage = userService.ConfirmAccountTokenError;
            return;
        }
        ConfirmFormModel = new LoginComponent.ConfirmForm();
        SetCurrentState(RegistrationState.Login);
    }

    private RequestResetTokenModel RequestResetTokenModel = new RequestResetTokenModel();

    private async Task RequestPasswordResetToken()
    {
        if (!await userService.RequestPasswordReset(RequestResetTokenModel))
        {
            ErrorMessage = userService.RequestPasswordResetError;
        }

        RequestResetTokenModel = new RequestResetTokenModel();
        SetCurrentState(RegistrationState.ResetPassword);
    }

    private ResetPasswordModel ResetPasswordModel = new ResetPasswordModel();

    private string resetTokenString = "";
    private string resetConfirmPassword = "";

    private async Task ResetPassword()
    {
        if (!Guid.TryParse(resetTokenString, out var resetToken))
        {
            ErrorMessage = "Invalid Reset Token";
            return;
        }

        if (ResetPasswordModel.NewPassword != resetConfirmPassword)
        {
            ErrorMessage = "Password Mismatch";
            return;
        }

        ResetPasswordModel.ResetToken = resetToken;
        if (!await userService.ResetPassword(ResetPasswordModel))
        {
            ErrorMessage = userService.ResetPasswordError;
        }

        ResetPasswordModel = new ResetPasswordModel();
        SetCurrentState(RegistrationState.Login);
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var accessToken))
        {
            if (!string.IsNullOrEmpty(accessToken))
            {
                await userService.SetTokensAndLoginWithTwitch(accessToken);
            }
        }

        userService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        userService.OnChange -= StateHasChanged;
    }
}
