@inject IChannelStatisticsService channelStatisticsService
@inject IUserService userService
@inject IAdminChannelService adminChannelService
@inject IJSRuntime jsRuntime
@implements IDisposable

@page "/channelstatistics"

<PageTitle Title="AHS: Statistics" />

@if (userService.IsUserAdmin && adminChannelService.Channels != null)
{
    <div class="row">
        <div class="col s12">
            <a class="dropdown-trigger btn" data-target="channelSelectDropDown" style="width:200px;margin-top:26px;">
                @(string.IsNullOrEmpty(channelStatisticsService.CurrentlySelectedChannel) ? "Channels" : channelStatisticsService.CurrentlySelectedChannel)
            </a>

            <ul id="channelSelectDropDown" class="dropdown-content">
                @foreach (var channel in adminChannelService.Channels.OrderBy(x => x.ChannelName))
                {
                    <li @onclick="async () => await ChangeChannel(channel.ChannelName)"><a>@channel.ChannelName</a></li>
                }
            </ul>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-12">
            <p>
                ChannelName: @channelStatisticsService.CurrentlySelectedChannel
            </p>
        </div>
    </div>
}

@if (channelStatisticsService.ChannelReportModel == null)
{
    <p>No suspensions yet :)</p>
}
else
{
    <div class="row">
        <div class="col s9">
            <canvas id="overallChart"></canvas>
        </div>
        <div class="col s3">
            <h5>User statistics</h5>
            <ul>
                <li>Unique Users Seen: @channelStatisticsService.ChannelReportModel.UniqueUsers</li>
                <li>Unique Users Suspended: @channelStatisticsService.ChannelReportModel.UniqueUsersSuspensions</li>
                <li>Of which are Bans: @channelStatisticsService.ChannelReportModel.UniqueUsersBan</li>
                <li>Of which are Timeouts: @channelStatisticsService.ChannelReportModel.UniqueUsersTimeout</li>
            </ul>
            <h5>Suspension Statistics</h5>
            <ul>
                <li>Total Suspensions: @channelStatisticsService.ChannelReportModel.TotalSuspensions</li>
                <li>Of which Bans: @channelStatisticsService.ChannelReportModel.TotalBans</li>
                <li>Of which Timeouts: @channelStatisticsService.ChannelReportModel.TotalTimeouts</li>
            </ul>
            <h5>System Statistics</h5>
            <ul>
                <li>Users banned by system: @channelStatisticsService.ChannelReportModel.TotalSystemBanCount</li>
            </ul>
        </div>
    </div>

    <div class="row">
        <div class="col s12">
            <canvas id="chartForTags"></canvas>
        </div>
    </div>

    <div class="row">
        <div class="col s12">
            <canvas id="SystemBansChart"></canvas>
        </div>
    </div>

    <div class="row">
        <div class="col s12">
            <canvas id="chartForRules"></canvas>
        </div>
    </div>
}


@code {
    protected override async Task OnInitializedAsync()
    {
        channelStatisticsService.OnChange += async () => await UpdateView();
        userService.OnChange += async () => await UpdateView();
        adminChannelService.OnChange += async () => await UpdateView();

        await channelStatisticsService.Initialize();
        await adminChannelService.Initialize();
        await jsRuntime.InvokeVoidAsync("InitializeStatisticsPage");

        await UpdateData();
    }

    private async Task ChangeChannel(string channelName)
    {
        await channelStatisticsService.ChangeChannel(channelName);
        await UpdateData();
    }

    private async Task UpdateData()
    {
        if (channelStatisticsService.ChannelReportModel == null)
        {
            return;
        }

        await jsRuntime.InvokeVoidAsync("ClearGraph");
        var suspensions = channelStatisticsService.ChannelReportModel.SuspensionsPerDay;
        await jsRuntime.InvokeVoidAsync("AddDataToGraph", suspensions);
        await jsRuntime.InvokeVoidAsync("AddDataToSystemBansGraph", channelStatisticsService.ChannelReportModel.SystemBansPerDay);

        await jsRuntime.InvokeVoidAsync("AddDataToTagsGraph", channelStatisticsService.ChannelReportModel.TagAppearances.OrderByDescending(x => x.Count));
        await jsRuntime.InvokeVoidAsync("AddDataToRulesGraph", channelStatisticsService.ChannelReportModel.RuleCounts.OrderByDescending(x => x.Count));
    }

    private async Task UpdateView()
    {
        StateHasChanged();
        await jsRuntime.InvokeVoidAsync("InitDropDowns");
    }

    public void Dispose()
    {
        channelStatisticsService.OnChange -= async () => await UpdateView();
        userService.OnChange -= async () => await UpdateView();
        adminChannelService.OnChange -= async () => await UpdateView();
    }
}
