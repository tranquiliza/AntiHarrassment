@inject ITagService tagService
@implements IDisposable

@page "/admin/tags"

<AdminOnlyComponent></AdminOnlyComponent>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            @if (tagService.Tags == null)
            {
                <p>LOADING</p>
            }
            else
            {
                <table class="table table-dark">
                    <thead class="thead-dark">
                        <tr>
                            <th scope="col">Tags</th>
                            <th scope="col">Description</th>
                            <th scope="col">Action</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var tag in tagService.Tags.OrderBy(x => x.TagName))
                        {
                            <tr>
                                <td>
                                    @tag.TagName
                                </td>
                                <td>
                                    @tag.TagDescription
                                </td>
                                <td>
                                    <div class="btn-group">
                                        <button class="btn btn-primary" @onclick="_ => PrimeForEdit(tag.TagId)">Edit</button>
                                        <button class="btn btn-danger btn-sm" @onclick="async _ => await tagService.DeleteTag(tag.TagId)">Delete</button>
                                    </div>
                                </td>
                            </tr>
                        }

                        <tr>
                            <td>
                                <input class="form-control" @onkeyup="PressedEnterNew" placeholder="Tag name" type="text" @bind-value="newTagName" />
                            </td>
                            <td>
                                <input class="form-control" @onkeyup="PressedEnterNew" placeholder="Description" type="text" @bind-value="newTagDescription" />
                            </td>
                            <td>
                                <button @onclick="AddNewTag" class="btn btn-success">Add</button>
                            </td>
                        </tr>
                        @if (updateTagId != default)
                        {
                            <tr>
                                <td>
                                    <input class="form-control" @onkeyup="PressedEnterUpdate" placeholder="Tag name" type="text" @bind-value="updateTagName" />
                                </td>
                                <td>
                                    <input class="form-control" @onkeyup="PressedEnterUpdate" placeholder="Description" type="text" @bind-value="updateTagDescription" />
                                </td>
                                <td>
                                    <div class="btn-group">
                                        <button @onclick="UpdateTag" class="btn btn-primary">Update</button>
                                        <button @onclick="CancelUpdate" class="btn btn-danger">Cancel</button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@code {
    private string newTagName = "";

    private string newTagDescription = "";

    private async Task PressedEnterUpdate(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await UpdateTag();
        }
    }

    private Guid updateTagId = default;
    private string updateTagName = "";
    private string updateTagDescription = "";

    private void PrimeForEdit(Guid tagId)
    {
        var tag = tagService.Tags.Find(x => x.TagId == tagId);
        if (tag != null)
        {
            updateTagId = tag.TagId;
            updateTagName = tag.TagName;
            updateTagDescription = tag.TagDescription;
        }
    }

    private async Task UpdateTag()
    {
        if (updateTagId != default)
        {
            await tagService.UpdateTag(updateTagId, updateTagName, updateTagDescription);

            updateTagId = default;
            updateTagName = "";
            updateTagDescription = "";
        }
    }

    private void CancelUpdate()
    {
        updateTagId = default;
        updateTagName = "";
        updateTagDescription = "";
    }

    private async Task PressedEnterNew(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddNewTag();
        }
    }

    private async Task AddNewTag()
    {
        await tagService.AddNewTag(newTagName, newTagDescription);
        newTagName = "";
    }

    protected override async Task OnInitializedAsync()
    {
        tagService.OnChange += StateHasChanged;
        await tagService.Initialize();
    }

    public void Dispose()
    {
        tagService.OnChange -= StateHasChanged;
    }
}
