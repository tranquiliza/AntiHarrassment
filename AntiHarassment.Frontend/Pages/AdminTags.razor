@inject ITagService tagService
@implements IDisposable

@page "/admin/tags"

<AdminOnlyComponent></AdminOnlyComponent>
<PageTitle Title="AHS: Admin Tags" />

<div class="row">
    <div class="col-12">
        @if (tagService.Tags == null)
        {
            <Spinner />
        }
        else
        {
            <table>
                <thead>
                    <tr>
                        <th scope="col">Tags</th>
                        <th scope="col">Description</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (updateTagId != default)
                    {
                        <tr>
                            <td>
                                <div class="input-field">
                                    <input id="tagNameUpdate" class="white-text" @onkeyup="PressedEnterUpdate" type="text" @bind-value="updateTagName" />
                                    <label for="tagNameUpdate">Tag Name</label>
                                </div>
                            </td>
                            <td>
                                <div class="input-field">
                                    <input id="tagDescriptionUpdate" class="white-text" @onkeyup="PressedEnterUpdate" type="text" @bind-value="updateTagDescription" />
                                    <label for="tagDescriptionUpdate">Description</label>
                                </div>
                            </td>
                            <td>
                                <div class="btn-group">
                                    <button @onclick="UpdateTag" class="waves-effect waves-light btn green">Update</button>
                                    <button @onclick="CancelUpdate" class="waves-effect waves-light btn red">Cancel</button>
                                </div>
                            </td>
                        </tr>
                    }
                    <tr>
                        <td>
                            <div class="input-field">
                                <input id="tagNameCreate" @onkeyup="PressedEnterNew" type="text" @bind-value="newTagName" />
                                <label for="tagNameCreate">Tag Name</label>
                            </div>
                        </td>
                        <td>
                            <div class="input-field">
                                <input id="tagDescriptionCreate" @onkeyup="PressedEnterNew" type="text" @bind-value="newTagDescription" />
                                <label for="tagDescriptionCreate">Description</label>
                            </div>
                        </td>
                        <td>
                            <button @onclick="AddNewTag" class="waves-effect waves-light btn green">Add</button>
                        </td>
                    </tr>
                    @foreach (var tag in tagService.Tags.OrderBy(x => x.TagName))
                    {
                        <tr>
                            <td>
                                @tag.TagName
                            </td>
                            <td>
                                @tag.TagDescription
                            </td>
                            <td>
                                <div class="btn-group">
                                    <button class="waves-effect waves-light btn" @onclick="_ => PrimeForEdit(tag.TagId)">Edit</button>
                                    <button class="waves-effect waves-light btn red" @onclick="async _ => await tagService.DeleteTag(tag.TagId)">Delete</button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private string newTagName = "";

    private string newTagDescription = "";

    private async Task PressedEnterUpdate(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await UpdateTag();
        }
    }

    private Guid updateTagId = default;
    private string updateTagName = "";
    private string updateTagDescription = "";

    private void PrimeForEdit(Guid tagId)
    {
        var tag = tagService.Tags.Find(x => x.TagId == tagId);
        if (tag != null)
        {
            updateTagId = tag.TagId;
            updateTagName = tag.TagName;
            updateTagDescription = tag.TagDescription;
        }
    }

    private async Task UpdateTag()
    {
        if (updateTagId != default)
        {
            await tagService.UpdateTag(updateTagId, updateTagName, updateTagDescription);

            updateTagId = default;
            updateTagName = "";
            updateTagDescription = "";
        }
    }

    private void CancelUpdate()
    {
        updateTagId = default;
        updateTagName = "";
        updateTagDescription = "";
    }

    private async Task PressedEnterNew(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddNewTag();
        }
    }

    private async Task AddNewTag()
    {
        await tagService.AddNewTag(newTagName, newTagDescription);
        newTagName = "";
    }

    protected override async Task OnInitializedAsync()
    {
        tagService.OnChange += StateHasChanged;
        await tagService.Initialize();
    }

    public void Dispose()
    {
        tagService.OnChange -= StateHasChanged;
    }
}
