@inject ISuspensionService suspensionService
@inject ITagService tagService
@inject IJSRuntime jsRuntime
@implements IDisposable

@page "/ChannelSuspensions"

<div class="container-fluid">
    @if (suspensionService.Channels == null)
    {
        <p>You don't have access to any channels</p>
    }
    else
    {
        <div class="row">
            <div class="col-3">
                <div class="dropdown">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="channelSelectMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @(string.IsNullOrEmpty(suspensionService.CurrentlySelectedChannel) ? "Channels" : suspensionService.CurrentlySelectedChannel)
                    </button>
                    <div class="dropdown-menu" aria-labelledby="channelSelectMenu">
                        @foreach (var channel in suspensionService.Channels.OrderBy(x => x.ChannelName))
                        {
                            <button @onclick="async () => await SelectChannel(channel.ChannelName)" class="dropdown-item" type="button">@channel.ChannelName</button>
                        }
                    </div>
                </div>
            </div>
            <div class="col-3">
                <input class="form-control" type="date" @bind-value="selectedDate" />
            </div>
        </div>
        <hr />
    }
    <div class="row">
        <div class="col-12">
            @if (suspensionService.Suspensions == null)
            {
                @if (suspensionService.Channels != null)
                {
                    <p>Loading...</p>
                }
            }
            else
            {
                if (suspensionService.Suspensions.Count == 0)
                {
                    <p>No suspensions yet</p>
                }

                @if (suspensionService.Suspensions.Any(x => x.LocalTimeStamp().Date != selectedDate.Date && !x.Audited))
                {
                    <div class="card bg-danger">
                        <div class="card-body">
                            <h5>UNAUDITED SUSPENSIONS DETECTED</h5>
                            <ul class="list-group">
                                @foreach (var unaudited in suspensionService.Suspensions
                                     .Where(x => !x.Audited && x.LocalTimeStamp().Date != selectedDate.Date)
                                     .GroupBy(x => x.LocalTimeStamp().Date)
                                     .Select(key => key.Key)
                                     .ToList())
                                {
                                    <li class="list-group-item list-group-item-danger">
                                        <button class="btn btn-primary" @onclick="() => selectedDate = unaudited.Date">@unaudited.Date.ShortFancyFormat()</button>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }

                <div class="accordion" id="suspensionsAccordion">
                    @foreach (var suspension in suspensionService.Suspensions.Where(x => x.LocalTimeStamp().Date == selectedDate.Date).OrderBy(x => x.InvalidSuspension).ThenBy(x => x.Audited).ThenByDescending(x => x.Timestamp))
                    {
                        <SuspensionComponent suspension="suspension" counter="counter" />

                        {
                            counter++;
                        }
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal For InvalidReason -->
<div class="modal fade" id="invalidReasoningModal" tabindex="-1" role="dialog" aria-labelledby="invalidReasoningModalLabel" aria-hidden="true">
    <div class="modal-dialog bg-dark">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="invalidReasoningModalLabel">Why is this Suspension Invalid?</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(InvalidReasonErrorMessage))
                {
                    <p class="text-danger">@InvalidReasonErrorMessage</p>
                }
                <input class="form-control" type="text" @bind-value="suspensionService.CurrentInvalidationReason" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">Cancel</button>
                <button @onclick="MarkInvalid" type="button" class="btn btn-success">Mark Invalid</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal For AccountLinking -->
<div class="modal fade" id="accountLinkingModal" tabindex="-1" role="dialog" aria-labelledby="accountLinkingModalLabel" aria-hidden="true">
    <div class="modal-dialog bg-dark">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="accountLinkingModalLabel">Link another user to this suspension</h5>
                <button @onclick="CloseLinkUserModal" type="button" class="close" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <label for="accountLinkingUserInput">Search For a User</label>
                <input id="accountLinkingUserInput" class="form-control" type="text" @bind-value="suspensionService.CurrentSearchTerm" />
                @if (suspensionService.UsersFromChannel != null)
                {
                    @foreach (var userName in suspensionService.UsersFromChannel)
                    {
                        <button @onclick="async _ => await LinkUserToSuspensions(userName)" class="btn btn-secondary">@userName</button>
                    }
                }
            </div>
            <div class="modal-footer">
                <button @onclick="CloseLinkUserModal" type="button" class="btn btn-danger">Cancel</button>
            </div>
        </div>
    </div>
</div>

@code {
    private DateTime selectedDate = DateTime.Now.Date;

    private int counter = 0;

    private async Task SelectChannel(string channelName)
    {
        await suspensionService.FetchSuspensionForChannel(channelName);
        await suspensionService.FetchSeenUsersForChannel(channelName);
    }

    private async Task CloseLinkUserModal()
    {
        if (suspensionService.CurrentlySelectedSuspension == null)
        {
            return;
        }

        await jsRuntime.InvokeVoidAsync("CloseModalForUserLinking");
        suspensionService.CurrentSearchTerm = "";
        suspensionService.CurrentlySelectedSuspension = null;
    }

    private async Task LinkUserToSuspensions(string userToLink)
    {
        if (suspensionService.CurrentlySelectedSuspension == null || string.IsNullOrEmpty(userToLink))
        {
            return;
        }

        await suspensionService.AddUserLinkToSuspension(suspensionService.CurrentlySelectedSuspension.SuspensionId, userToLink);

        await jsRuntime.InvokeVoidAsync("CloseModalForUserLinking");
        suspensionService.CurrentSearchTerm = "";
        suspensionService.CurrentlySelectedSuspension = null;
    }

    private string InvalidReasonErrorMessage = "";

    private async Task MarkInvalid()
    {
        if (suspensionService.CurrentlySelectedSuspensionForInvalidation != null && !string.IsNullOrEmpty(suspensionService.CurrentInvalidationReason))
        {
            await suspensionService.UpdateSuspensionValidity(suspensionService.CurrentlySelectedSuspensionForInvalidation.SuspensionId, true, suspensionService.CurrentInvalidationReason);
            await jsRuntime.InvokeVoidAsync("CloseModalForInvalidReasoning");

            InvalidReasonErrorMessage = "";
        }
        else
        {
            InvalidReasonErrorMessage = "You must give a reason why the suspension is invalid!";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        suspensionService.OnChange += UpdateUi;
        tagService.OnChange += UpdateUi;
        await tagService.Initialize();
        await suspensionService.Initialize();
    }

    private void UpdateUi()
    {
        counter = 0;
        StateHasChanged();
    }

    public void Dispose()
    {
        suspensionService.OnChange -= UpdateUi;
        tagService.OnChange -= UpdateUi;
    }
}
