@inject ISuspensionService suspensionService
@inject ITagService tagService
@inject IJSRuntime jsRuntime
@implements IDisposable

@page "/ChannelSuspensions"

<div class="container-fluid">
    @if (suspensionService.Channels == null)
    {
        <p>You don't have access to any channels</p>
    }
    else
    {
        <div class="row">
            <div class="col-3">
                <div class="dropdown">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="channelSelectMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @(string.IsNullOrEmpty(suspensionService.CurrentlySelectedChannel) ? "Channels" : suspensionService.CurrentlySelectedChannel)
                    </button>
                    <div class="dropdown-menu" aria-labelledby="channelSelectMenu">
                        @foreach (var channel in suspensionService.Channels.OrderBy(x => x.ChannelName))
                        {
                            <button @onclick="async () => await SelectChannel(channel.ChannelName)" class="dropdown-item" type="button">@channel.ChannelName</button>
                        }
                    </div>
                </div>
            </div>
            <div class="col-3">
                <input class="form-control" type="date" @bind-value="selectedDate" />
            </div>
        </div>
        <hr />
    }
    <div class="row">
        <div class="col-12">
            @if (suspensionService.Suspensions == null)
            {
                @if (suspensionService.Channels != null)
                {
                    <p>Loading...</p>
                }
            }
            else
            {
                if (suspensionService.Suspensions.Count == 0)
                {
                    <p>No suspensions yet</p>
                }

                @if (suspensionService.Suspensions.Any(x => x.LocalTimeStamp().Date != selectedDate.Date && !x.Audited))
                {
                    <div class="card bg-danger">
                        <div class="card-body">
                            <h5>UNAUDITED SUSPENSIONS DETECTED</h5>
                            <ul class="list-group">
                                @foreach (var unaudited in suspensionService.Suspensions
                                            .Where(x => !x.Audited && x.LocalTimeStamp().Date != selectedDate.Date)
                                            .GroupBy(x => x.LocalTimeStamp().Date)
                                            .Select(key => key.Key)
                                            .ToList())
                                {
                                    <li class="list-group-item list-group-item-danger">
                                        <button class="btn btn-primary" @onclick="() => selectedDate = unaudited.Date">@unaudited.Date.ShortFancyFormat()</button>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>

                }

                <div class="accordion" id="suspensionsAccordion">
                    @foreach (var suspension in suspensionService.Suspensions.Where(x => x.LocalTimeStamp().Date == selectedDate.Date).OrderBy(x => x.InvalidSuspension).ThenBy(x => x.Audited).ThenByDescending(x => x.Timestamp))
                    {
                        <div class="card bg-dark">
                            <div class="card-header">
                                <button class="btn @SelectButtonColor(suspension) btn-block text-left collapsed text-light" type="button" data-toggle="collapse" data-target="@("#suspension"+counter)" aria-expanded="false">
                                    @suspension.LocalTimeStamp().FancyFormat() -
                                    <b>@suspension.Username</b>
                                    @(suspension.Duration == 0 ? "Permanent" : $"{suspension.Duration.ToString()} seconds")
                                    @suspension.SuspensionType.ToString()
                                </button>
                            </div>
                            <div id="@("suspension"+counter)" class="collapse" data-parent="#suspensionsAccordion">
                                <div class="card-body" style="min-height:60vh">
                                    <div class="btn-group">
                                        <div class="row">
                                            <div class="col-12">
                                                @if (suspension.InvalidSuspension)
                                                {
                                                    <button @onclick="async _ => await UpdateValidity(suspension.SuspensionId, invalidate: false)" class="btn btn-success btn-sm">Mark Valid</button>
                                                }
                                                else
                                                {
                                                    <button @onclick="async _ => await UpdateValidity(suspension.SuspensionId, invalidate: true)" class="btn btn-danger btn-sm">Mark Invalid</button>
                                                }

                                                @if (suspension.Audited)
                                                {
                                                    <button @onclick="async _ => await UpdateAudited(suspension.SuspensionId, audited: false)" class="btn btn-danger btn-sm">Mark as Unaudited</button>
                                                }
                                                else
                                                {
                                                    <button @onclick="async _ => await UpdateAudited(suspension.SuspensionId, audited: true)" class="btn btn-success btn-sm">Mark as Audited</button>
                                                    <button @onclick="async _ => await OpenLinkUserModal(suspension.SuspensionId)" class="btn btn-warning btn-sm">Link User</button>
                                                }
                                                <a class="btn btn-primary btn-sm" target="_blank" href="/userlookup/@suspension.Username">Lookup User</a>
                                                <button class="btn btn-secondary btn-sm" @onclick="async _ => await CopyToClipboard(suspension.Username)">@CopyUsernameButtonText</button>
                                            </div>
                                        </div>
                                    </div>
                                    <hr />
                                    @foreach (var tag in suspension.Tags)
                                    {
                                        <span class="badge badge-secondary" data-placement="right" title="@tag.TagDescription">
                                            @tag.TagName
                                            @if (!suspension.Audited)
                                            {
                                                <button class="btn btn-sm" @onclick="async _ => await RemoveTagFromSuspension(suspension.SuspensionId, tag.TagId)">x</button>
                                            }
                                        </span>
                                    }

                                    @if (tagService.Tags != null && !suspension.Audited)
                                    {
                                        <div class="btn-group">
                                            <button class="btn btn-secondary dropdown-toggle" type="button" id="@("tagSelectMenu"+counter)" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                Tags
                                            </button>
                                            <div class="dropdown-menu" aria-labelledby="@("#tagSelectMenu"+counter)">
                                                @foreach (var tag in tagService.Tags.OrderBy(x => x.TagName))
                                                {
                                                    <button @onclick="async _ => await AddTagToSuspension(suspension.SuspensionId, tag.TagId)" class="dropdown-item" type="button" data-placement="right" title="@tag.TagDescription">@tag.TagName</button>
                                                }
                                            </div>
                                        </div>
                                        <hr />
                                    }

                                    @if (suspension.LinkedUsernames.Count != 0)
                                    {
                                        <p>
                                            <b>Linked Usernames</b>
                                        </p>
                                        @foreach (var username in suspension.LinkedUsernames)
                                        {
                                            <span class="badge badge-danger">
                                                @username
                                                @if (!suspension.Audited)
                                                {
                                                    <button class="btn btn-sm" @onclick="async _ => await suspensionService.RemoveUserLinkFromSuspension(suspension.SuspensionId, username)">x</button>
                                                }
                                            </span>
                                        }
                                    }


                                    @if (suspension.InvalidSuspension && !string.IsNullOrEmpty(suspension.InvalidationReason))
                                    {
                                        <p class="text-danger"><b>Invalid Because:</b> @suspension.InvalidationReason</p>
                                        <hr />
                                    }

                                    @foreach (var message in suspension.Messages)
                                    {
                                        @if (message.AutoModded)
                                        {
                                            <p class="text-danger"><b>@message.LocalTimestamp()</b> @message.Message</p>
                                        }
                                        else
                                        {
                                            <p><b>@message.LocalTimestamp()</b> @message.Message</p>
                                        }

                                    }
                                </div>
                            </div>
                        </div>

                        {
                            counter++;
                        }
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal For InvalidReason -->
<div class="modal fade" id="invalidReasoningModal" tabindex="-1" role="dialog" aria-labelledby="invalidReasoningModalLabel" aria-hidden="true">
    <div class="modal-dialog bg-dark">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="invalidReasoningModalLabel">Why is this Suspension Invalid?</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(InvalidReasonErrorMessage))
                {
                    <p class="text-danger">@InvalidReasonErrorMessage</p>
                }
                <input class="form-control" type="text" @bind-value="InvalidationReason" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">Cancel</button>
                <button @onclick="MarkInvalid" type="button" class="btn btn-success">Mark Invalid</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal For AccountLinking -->
<div class="modal fade" id="accountLinkingModal" tabindex="-1" role="dialog" aria-labelledby="accountLinkingModalLabel" aria-hidden="true">
    <div class="modal-dialog bg-dark">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="accountLinkingModalLabel">Link another user to this suspension</h5>
                <button @onclick="CloseLinkUserModal" type="button" class="close" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <label for="accountLinkingUserInput">Search For a User</label>
                <input id="accountLinkingUserInput" class="form-control" type="text" @bind-value="suspensionService.CurrentSearchTerm" />
                @if (suspensionService.UsersFromChannel != null)
                {
                    @foreach (var userName in suspensionService.UsersFromChannel)
                    {
                        <button @onclick="async _ => await LinkUserToSuspensions(userName)" class="btn btn-secondary">@userName</button>
                    }
                }
            </div>
            <div class="modal-footer">
                <button @onclick="CloseLinkUserModal" type="button" class="btn btn-danger">Cancel</button>
            </div>
        </div>
    </div>
</div>

@code {
    private DateTime selectedDate = DateTime.Now.Date;

    private string CopyUsernameButtonText = "Copy Username";

    private async Task CopyToClipboard(string textToCopy)
    {
        CopyUsernameButtonText = "Copied";
        await jsRuntime.InvokeVoidAsync("CopyTextToClipboard", textToCopy);

        await Task.Delay(800);
        CopyUsernameButtonText = "Copy Username";
    }

    private int counter = 0;

    private string SelectButtonColor(SuspensionModel suspension)
    {
        if (suspension.Audited && suspension.InvalidSuspension)
        {
            return "btn-secondary";
        }
        if (suspension.Audited && !suspension.InvalidSuspension)
        {
            return "btn-success";
        }
        if (!suspension.Audited && suspension.InvalidSuspension)
        {
            return "btn-danger";
        }
        if (!suspension.Audited && !suspension.InvalidSuspension)
        {
            return "btn-warning";
        }

        return "btn-secondary";
    }

    private async Task SelectChannel(string channelName)
    {
        await suspensionService.FetchSuspensionForChannel(channelName);
    }

    private string InvalidationReason = "";
    private Guid CurrentlySelectedSuspensionForInvalid = default;

    private string InvalidReasonErrorMessage = "";

    private async Task UpdateValidity(Guid suspensionId, bool invalidate)
    {
        if (invalidate)
        {
            CurrentlySelectedSuspensionForInvalid = suspensionId;
            InvalidationReason = "";

            await jsRuntime.InvokeVoidAsync("OpenModalForInvalidReasoning");
            return;
        }

        await suspensionService.UpdateSuspensionValidity(suspensionId, invalidate, "");
    }

    private async Task MarkInvalid()
    {
        if (CurrentlySelectedSuspensionForInvalid != default && !string.IsNullOrEmpty(InvalidationReason))
        {
            await suspensionService.UpdateSuspensionValidity(CurrentlySelectedSuspensionForInvalid, true, InvalidationReason);
            await jsRuntime.InvokeVoidAsync("CloseModalForInvalidReasoning");
            InvalidReasonErrorMessage = "";
        }
        else
        {
            InvalidReasonErrorMessage = "You must give a reason why the suspension is invalid!";
        }
    }

    private async Task UpdateAudited(Guid suspensionId, bool audited)
    {
        await suspensionService.UpdateAudited(suspensionId, audited);
    }

    private async Task AddTagToSuspension(Guid suspensionId, Guid tagId)
    {
        @if (tagId == Guid.Parse("7A1694E6-5418-4FB6-9347-093AEE2AA4A9")) //Yes this is trash code, but not sure how else to do it
        {
            await OpenLinkUserModal(suspensionId);
        }

        await suspensionService.AddTagToSuspension(suspensionId, tagId);
    }

    private async Task RemoveTagFromSuspension(Guid suspensionId, Guid tagId)
    {
        await suspensionService.RemoveTagFromSuspension(suspensionId, tagId);
    }

    private Guid CurrentlySelectedSuspensionForUserLinking = default;
    private async Task LinkUserToSuspensions(string userToLink)
    {
        if (CurrentlySelectedSuspensionForUserLinking == default || string.IsNullOrEmpty(userToLink))
        {
            return;
        }

        await suspensionService.AddUserLinkToSuspension(CurrentlySelectedSuspensionForUserLinking, userToLink);

        await jsRuntime.InvokeVoidAsync("CloseModalForUserLinking");
        suspensionService.CurrentSearchTerm = "";
        suspensionService.CurrentlySelectedSuspension = null;
        CurrentlySelectedSuspensionForUserLinking = default;
    }

    private async Task CloseLinkUserModal()
    {
        if (CurrentlySelectedSuspensionForUserLinking == default)
        {
            return;
        }

        await jsRuntime.InvokeVoidAsync("CloseModalForUserLinking");
        suspensionService.CurrentSearchTerm = "";
        suspensionService.CurrentlySelectedSuspension = null;
        CurrentlySelectedSuspensionForUserLinking = default;
    }


    private async Task OpenLinkUserModal(Guid suspensionId)
    {
        suspensionService.CurrentlySelectedSuspension = suspensionService.Suspensions.Find(x => x.SuspensionId == suspensionId);
        CurrentlySelectedSuspensionForUserLinking = suspensionId;

        await jsRuntime.InvokeVoidAsync("OpenModalForUserLinking");
    }

    protected override async Task OnInitializedAsync()
    {
        suspensionService.OnChange += UpdateUi;
        tagService.OnChange += UpdateUi;
        await tagService.Initialize();
        await suspensionService.Initialize();
    }

    private void UpdateUi()
    {
        counter = 0;
        StateHasChanged();
    }

    public void Dispose()
    {
        suspensionService.OnChange -= UpdateUi;
        tagService.OnChange -= UpdateUi;
    }
}
