@inject ISuspensionService suspensionService
@inject ITagService tagService
@inject IJSRuntime jsRuntime
@implements IDisposable

@page "/ChannelSuspensions"

<PageTitle Title="AHS: Suspensions" />


@if (suspensionService.Channels == null)
{
    <p>You don't have access to any channels. Go to settings and ensure you have enabled the system!</p>
}
else
{
    <div class="row">
        <div class="col s3">
            <div style="margin-top:26px;" class="dropdown">
                <a class="dropdown-trigger btn" data-target="channelSelectDropDown" style="width:200px;">
                    @(string.IsNullOrEmpty(suspensionService.CurrentlySelectedChannel) ? "Channels" : suspensionService.CurrentlySelectedChannel)
                </a>
                <ul id="channelSelectDropDown" class="dropdown-content">
                    @foreach (var channel in suspensionService.Channels.OrderBy(x => x.ChannelName))
                    {
                        <li @onclick="async () => await SelectChannel(channel.ChannelName)"><a> @channel.ChannelName</a></li>
                    }
                </ul>
            </div>
        </div>
        <div class="col s3">
            <div class="input-field">
                <input @onkeyup="KeyUpEvent" class="white-text" type="date" @bind-value="suspensionService.SelectedDate" />
            </div>
        </div>
        <div class="col s3">
            <button class="btn" style="margin-top:26px" @onclick="FetchForDate"><i class="material-icons">search</i></button>
        </div>
        <div class="col s3">
            <button style="margin-top:26px;" @onclick="OpenModelForCreateSuspension" class="btn green">Create Suspension</button>
        </div>
    </div>
}

<div class="row">
    <div class="col s12">
        @if (suspensionService.Suspensions == null)
        {
            @if (suspensionService.Channels != null)
            {
                <Spinner />
            }
        }
        else
        {
            if (suspensionService.Suspensions.Count == 0)
            {
                <p>No suspensions on this day!</p>
            }

            @if (suspensionService.DatesWithUnauditedSuspensions != null && suspensionService.DatesWithUnauditedSuspensions.Count(x => x != suspensionService.SelectedDate) > 0)
            {
                <div class="card red darken-3">
                    <div class="card-content">
                        <span class="card-title"><b>UNAUDITED SUSPENSIONS DETECTED</b></span>
                        <div class="collection with-header">
                            @foreach (var date in suspensionService.DatesWithUnauditedSuspensions.Where(x => x != suspensionService.SelectedDate))
                            {
                                <a @onclick="async () => await SetDateAndFetch(date.Date)" class="hand-pointer collection-item">
                                    @date.Date.ShortFancyFormat()
                                </a>
                            }
                        </div>
                    </div>
                </div>

            }

            <ul class="collapsible">
                @foreach (var suspension in suspensionService.Suspensions.OrderBy(x => x.InvalidSuspension).ThenBy(x => x.Audited).ThenByDescending(x => x.Timestamp))
                {
                    <SuspensionComponent suspension="suspension" counter="counter" />

                    {
                        counter++;
                    }
                }
            </ul>
        }
    </div>
</div>

<!-- Modal For InvalidReason -->
<div class="modal" id="invalidReasoningModal">
    <div class="modal-content">
        <h4>
            Why is this Suspension Invalid?
        </h4>
        @if (!string.IsNullOrEmpty(InvalidReasonErrorMessage))
        {
            <p class="text-danger">@InvalidReasonErrorMessage</p>
        }
        <div class="input-field">
            <input type="text" @bind-value="suspensionService.CurrentInvalidationReason" />
        </div>
    </div>
    <div class="modal-footer">
        <button class="btn red modal-close">Cancel</button>
        <button @onclick="MarkInvalid" class="btn green">Mark Invalid</button>
    </div>
</div>

<!-- Modal For AccountLinking -->
<div class="modal" id="accountLinkingModal">
    <div class="modal-content">
        <h4>Link another user to this suspension</h4>
        <div class="input-field">
            <input id="accountLinkReasoninput" type="text" @bind-value="suspensionService.UserLinkReason" />
            <label for="accountLinkReasoninput">Reason for linking</label>
        </div>
        <div class="input-field">
            <input id="accountLinkingUserInput" type="text" @bind-value="suspensionService.CurrentSearchTerm" />
            <label for="accountLinkingUserInput">Search For a User</label>
        </div>
        @if (suspensionService.UsersFromChannel != null)
        {
            @foreach (var userName in suspensionService.UsersFromChannel)
            {
                <button @onclick="async _ => await LinkUserToSuspensions(userName)" class="btn grey darken-3">@userName</button>
            }
        }
    </div>
    <div class="modal-footer">
        <button @onclick="CloseLinkUserModal" class="btn red modal-close">Cancel</button>
    </div>
</div>

<!-- Modal For CreateSuspension -->
<div class="modal" id="createSuspensionModal">
    <div class="modal-content">
        <h4>Create a suspension</h4>

        <div class="input-field">
            <label for="createSuspensionUsernameInput">Twitch Username</label>
            <input id="createSuspensionUsernameInput" type="text" @bind-value="UsernameForNewSuspension" />
        </div>
    </div>
    <div class="modal-footer">
        <button @onclick="CloseModelForCreateSuspension" class="btn red modal-close">Cancel</button>
        <button @onclick="CreateNewSuspension" class="btn green">Create</button>
    </div>
</div>


<!-- Modal For SuspensionImages -->
<div class="modal" id="suspensionImagesModal">
    <div class="modal-content">
        <h4>Images for suspension</h4>
        <div class="modal-body">
            @if (suspensionService.CurrentlySelectedSuspensionForImages != null)
            {
                foreach (var imageUrl in suspensionService.CurrentlySelectedSuspensionForImages.Images)
                {
                    <img class="materialboxed" style="max-width:100%;" src="@imageUrl" />
                }
            }
        </div>
    </div>
    <div class="modal-footer">
        <button class="btn red modal-close">Cancel</button>
    </div>
</div>

@code {
    private int counter = 0;

    private async Task SelectChannel(string channelName)
    {
        suspensionService.SelectedDate = DateTime.Now.Date;
        await suspensionService.FetchSuspensionForChannel(channelName, DateTime.UtcNow);
        await suspensionService.FetchSeenUsersForChannel(channelName);
        await suspensionService.FetchDaysWithUnauditedSuspensions(channelName);
    }

    private async Task CloseLinkUserModal()
    {
        if (suspensionService.CurrentlySelectedSuspension == null)
        {
            return;
        }

        await jsRuntime.InvokeVoidAsync("CloseModalForUserLinking");
        suspensionService.CurrentSearchTerm = "";
        suspensionService.UserLinkReason = "";
        suspensionService.CurrentlySelectedSuspension = null;
    }

    private async Task FetchForDate()
    {
        await suspensionService.FetchSuspensionForChannel(suspensionService.CurrentlySelectedChannel, suspensionService.SelectedDate);
    }

    private async Task SetDateAndFetch(DateTime date)
    {
        suspensionService.SelectedDate = date;

        await suspensionService.FetchSuspensionForChannel(suspensionService.CurrentlySelectedChannel, date);
    }

    private async Task KeyUpEvent(KeyboardEventArgs e)
    {
        await FetchForDate();
    }

    private async Task LinkUserToSuspensions(string userToLink)
    {
        if (suspensionService.CurrentlySelectedSuspension == null
            || string.IsNullOrEmpty(userToLink)
            || string.IsNullOrEmpty(suspensionService.UserLinkReason))
        {
            return;
        }

        await suspensionService.AddUserLinkToSuspension(suspensionService.CurrentlySelectedSuspension.SuspensionId, userToLink, suspensionService.UserLinkReason);

        await jsRuntime.InvokeVoidAsync("CloseModalForUserLinking");
        suspensionService.CurrentSearchTerm = "";
        suspensionService.CurrentlySelectedSuspension = null;
        suspensionService.UserLinkReason = "";
    }

    private string InvalidReasonErrorMessage = "";

    private string UsernameForNewSuspension = "";

    private async Task CloseModelForCreateSuspension()
    {
        await jsRuntime.InvokeVoidAsync("CloseModalForCreatingSuspension");
        UsernameForNewSuspension = "";
    }

    private async Task OpenModelForCreateSuspension()
    {
        await jsRuntime.InvokeVoidAsync("OpenModalForCreatingSuspension");
    }

    private async Task CreateNewSuspension()
    {
        if (string.IsNullOrEmpty(UsernameForNewSuspension))
        {
            return;
        }

        await suspensionService.CreateNewSuspension(UsernameForNewSuspension);

        await CloseModelForCreateSuspension();
    }

    private async Task MarkInvalid()
    {
        if (suspensionService.CurrentlySelectedSuspensionForInvalidation != null && !string.IsNullOrEmpty(suspensionService.CurrentInvalidationReason))
        {
            await suspensionService.UpdateSuspensionValidity(suspensionService.CurrentlySelectedSuspensionForInvalidation.SuspensionId, true, suspensionService.CurrentInvalidationReason);
            await jsRuntime.InvokeVoidAsync("CloseModalForInvalidReasoning");

            InvalidReasonErrorMessage = "";
        }
        else
        {
            InvalidReasonErrorMessage = "You must give a reason why the suspension is invalid!";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        suspensionService.OnChange += UpdateUi;
        tagService.OnChange += UpdateUi;
        await tagService.Initialize();
        await suspensionService.Initialize();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeVoidAsync("InitDropDowns");
        await jsRuntime.InvokeVoidAsync("InitCollapsibles");
        await jsRuntime.InvokeVoidAsync("InitTooltips");
        await jsRuntime.InvokeVoidAsync("InitImageBoxes");
    }

    private void UpdateUi()
    {
        counter = 0;
        StateHasChanged();
    }

    public void Dispose()
    {
        suspensionService.OnChange -= UpdateUi;
        tagService.OnChange -= UpdateUi;
    }
}
