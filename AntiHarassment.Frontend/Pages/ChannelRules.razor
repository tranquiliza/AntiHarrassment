@inject IUserChannelService channelService
@inject IJSRuntime jsRuntime
@inject ITagService tagService
@inject IUserService userService
@inject IAdminChannelService adminChannelService

@implements IDisposable

@page "/channelRules"

<div class="row">
    <div class="col s12">
        @if (channelService.Channel == null)
        {
            <Spinner />
        }
        else
        {
            <AdminChannelChanger adminChannelService="adminChannelService" channelService="channelService" />

            @if (!channelService.Channel.SystemIsModerator)
            {
                <div class="row">
                    <div class="col s12">
                        <div class="card red darken-3">
                            <div class="card-content">
                                <span class="card-title">BE ADVISED</span>
                                <p>
                                    You have not made the AntiHarassment user a moderator on your channel. <br />
                                    If you wish the use features that involve usage of moderator actions like Automated Bans and Listening to AutoModded Messages, the AntiHarassment User will need moderator status in your channel!
                                </p>
                                <p>
                                    If you have already granted the AntiHarassment user moderator status, please make sure to click the "I modded the bot" button!
                                </p>
                            </div>
                            <div class="card-action">
                                <a class="hand-pointer btn" @onclick="async _ => await channelService.UpdateSystemModeratorState(true)">I Modded the Bot</a>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="card grey darken-3">
                <div class="card-content">
                    <span class="card-title">What are Channel Rules?</span>
                    <p>
                        The Channel Rules tool is a way for you to set up automated actions based on a user's history. <br />
                        When a user is Suspended (banned or timed out) and an admin, moderator, or streamer audits these suspensions,
                        the system will check them against your rules and will automatically take action based on the rules you create for your channel.
                    </p>
                    <p>
                        For Example, an Anti Bot Rule: You create a rule with the "Bot" tag and set the thresholds for trigger to your liking (we suggest 0 Timeouts, 1 Ban for bots).  <br />
                        In this example, any time a bot account is banned from another channel that is using this system and the ban is audited with the "Bot" tag, the system will automatically ban that user in your channel!
                    </p>
                    <p>
                        <b>"We accidentally banned someone, do we risk them automatically getting banned elsewhere?"</b><br />
                        No! Because of the nature of the system, everything needs to be reviewed before any automated actions will occur. <br />
                        Accidental suspension? Mark it as invalid!
                    </p>
                </div>
            </div>

            <div class="row">
                <div class="col s12">
                    <button class="waves-effect waves-light btn green modal-trigger" data-target="createRuleModal">New Rule</button>
                </div>
            </div>

            <div class="row">
                <div class="col s12">
                    @if (channelService.Channel.ChannelRules.Count > 0)
                    {
                        <table>
                            <thead>
                                <tr>
                                    <th scope="col">Rule Name</th>
                                    <th scope="col">Tag Name</th>
                                    <th scope="col">Timeout Threshold</th>
                                    <th scope="col">Ban Threshold</th>
                                    <th scope="col">Action on Trigger</th>
                                    <th scope="col"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var rule in channelService.Channel.ChannelRules)
                                {
                                    <tr>
                                        <td>@rule.RuleName</td>
                                        <td>
                                            <div class="chip tooltipped" data-position="bottom" data-tooltip="@rule.Tag.TagDescription">
                                                @rule.Tag.TagName
                                            </div>
                                        </td>
                                        <td>@rule.TimeoutsForTrigger</td>
                                        <td>@rule.BansForTrigger</td>
                                        <td>@rule.ActionOnTrigger.ToString()</td>
                                        <td>
                                            <button @onclick="async _ => await LoadRuleForEdit(rule.RuleId)" data-target="editRuleModal" class="btn green">Edit</button>
                                            <button @onclick="async _ => await DeleteRule(rule.RuleId)" class="btn red">Delete</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal For Create Rule -->
<div id="createRuleModal" class="modal grey darken-3">
    <div class="modal-content">
        <h4 id="createRuleModalLabel">Create AutoBan Rule</h4>

        <EditForm Model="@model" OnValidSubmit="CreateNewRule">
            <div class="row">
                <div class="col s12">
                    <div class="input-field">
                        <input @bind-value="model.RuleName" type="text" class="white-text" id="ruleNameInput">
                        <label for="ruleNameInput">Rule name</label>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col s12">
                    <div class="input-field white-text">
                        <select @bind="model.TagId">
                            <option value="" disabled selected>Choose Tag</option>
                            @if (tagService.Tags != null)
                            {
                                @foreach (var tag in tagService.Tags.OrderBy(x => x.TagName))
                                {
                                    <option value="@tag.TagId">@tag.TagName</option>
                                }
                            }
                        </select>
                        <label>Rule for Tag</label>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col s6">
                    <div class="input-field">
                        <input @bind-value="model.TimeoutsForTrigger" min="0" type="number" class="white-text" id="timeoutsTriggerInput">
                        <label for="timeoutsTriggerInput">Timeouts for trigger</label>
                    </div>
                </div>
                <div class="col s6">
                    <div class="input-field">
                        <input @bind-value="model.BansForTrigger" min="0" type="number" class="white-text" id="bansTriggerInput">
                        <label for="bansTriggerInput">Bans for trigger</label>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col s12">
                    <div class="input-field white-text">
                        <select @bind="model.ChannelRuleAction">
                            <option value="" disabled selected>Select Action</option>
                            @foreach (var value in (ChannelRuleActionModel[])Enum.GetValues(typeof(ChannelRuleActionModel)))
                            {
                                <option value="@value">@value</option>
                            }
                        </select>
                        <label>Action on Trigger</label>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
    <div class="modal-footer grey darken-3">
        <button type="button" class="btn red modal-close">Cancel</button>
        <button @onclick="CreateNewRule" type="button" class="btn green">Create</button>
    </div>
</div>

<!-- Modal For Edit Rule -->
<div class="modal grey darken-3" id="editRuleModal">
    <div style="min-height:60vh;" class="modal-content">
        <h4>Edit AutoBan Rule</h4>
        <EditForm Model="@updateRuleModel" OnValidSubmit="UpdateRule">
            <div class="row">
                <div class="col s12">
                    <div class="input-field">
                        <input class="white-text" @bind-value="updateRuleModel.RuleName" type="text" id="ruleNameInput">
                        <label for="ruleNameInput">Rule name</label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col s6">
                    <div class="input-field">
                        <input class="white-text" @bind-value="updateRuleModel.TimeOutsForTrigger" min="0" type="number" id="timeoutsTriggerInput">
                        <label for="timeoutsTriggerInput">Timeouts for trigger</label>
                    </div>
                </div>
                <div class="col s6">
                    <div class="input-field">
                        <input class="white-text" @bind-value="updateRuleModel.BansForTrigger" min="0" type="number" id="bansTriggerInput">
                        <label for="bansTriggerInput">Bans for trigger</label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col s12">
                    @*<div class="input-field white-text">
                            <select @bind="updateRuleModel.ChannelRuleAction">
                                <option value="" disabled selected>Select Action</option>
                                @foreach (var value in (ChannelRuleActionModel[])Enum.GetValues(typeof(ChannelRuleActionModel)))
                                {
                                    <option value="@value">@value</option>
                                }
                            </select>
                            <label>Action on Trigger</label>
                        </div>*@

                    <label>Select Action</label>
                    <select @bind="updateRuleModel.ChannelRuleAction" class="browser-default">
                        <option value="" disabled selected>Choose your option</option>
                        @foreach (var value in (ChannelRuleActionModel[])Enum.GetValues(typeof(ChannelRuleActionModel)))
                        {
                            <option value="@value">@value</option>
                        }
                    </select>
                </div>
            </div>
        </EditForm>
    </div>
    <div class="modal-footer grey darken-3">
        <button type="button" class="btn red modal-close">Cancel</button>
        <button @onclick="UpdateRule" type="button" class="btn green">Update</button>
    </div>
</div>

@code {
    private AddChannelRuleModel model = new AddChannelRuleModel();
    private UpdateChannelRuleModel updateRuleModel = new UpdateChannelRuleModel();
    private Guid currentlyEditingRuleId = default;

    private async Task CreateNewRule()
    {
        if (model.TagId == default)
        {
            return;
        }

        if (string.IsNullOrEmpty(model.RuleName))
        {
            return;
        }

        if (model.TimeoutsForTrigger == 0 && model.BansForTrigger == 0)
        {
            // cant have both be 0... That would make no sense.
            return;
        }

        await jsRuntime.InvokeVoidAsync("CloseModalForCreateRule");
        await channelService.CreateNewChannelRule(model);

        model = new AddChannelRuleModel();
    }

    private async Task UpdateRule()
    {
        if (string.IsNullOrEmpty(updateRuleModel.RuleName))
        {
            return;
        }

        if (updateRuleModel.TimeOutsForTrigger == 0 && updateRuleModel.BansForTrigger == 0)
        {
            return;
        }

        await channelService.UpdateChannelRule(updateRuleModel, currentlyEditingRuleId);

        updateRuleModel = new UpdateChannelRuleModel();
        currentlyEditingRuleId = default;
    }

    private async Task LoadRuleForEdit(Guid ruleId)
    {
        var rule = channelService.Channel.ChannelRules.Find(x => x.RuleId == ruleId);
        currentlyEditingRuleId = ruleId;
        updateRuleModel = new UpdateChannelRuleModel
        {
            BansForTrigger = rule.BansForTrigger,
            RuleName = rule.RuleName,
            ChannelRuleAction = rule.ActionOnTrigger,
            TimeOutsForTrigger = rule.TimeoutsForTrigger
        };

        StateHasChanged();

        await jsRuntime.InvokeVoidAsync("OpenModalForEditRule");
    }

    private async Task DeleteRule(Guid ruleId)
    {
        await channelService.RemoveChannelRule(ruleId);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateUi();
        }
    }

    protected async override Task OnInitializedAsync()
    {
        channelService.OnChange += async () => await UpdateUi();
        tagService.OnChange += async () => await UpdateUi();
        adminChannelService.OnChange += async () => await UpdateUi();

        await channelService.Initialize();
        await tagService.Initialize();
        await adminChannelService.Initialize();
    }

    private async Task UpdateUi()
    {
        StateHasChanged();

        await jsRuntime.InvokeVoidAsync("InitModal");
        await jsRuntime.InvokeVoidAsync("InitSelectors");
    }

    public void Dispose()
    {
        channelService.OnChange -= async () => await UpdateUi();
        tagService.OnChange -= async () => await UpdateUi();
        adminChannelService.OnChange -= async () => await UpdateUi();
    }
}
