@inject ITagService tagService
@inject IJSRuntime jsRuntime
@inject AntiHarassment.Frontend.Infrastructure.IApiGateway apiGateway

@implements IDisposable

@page "/taglookup"

@if (tagService.Tags != null)
{
    <div class="row">
        <div class="col s12">
            <a class="dropdown-trigger btn" data-target="tagSelectDropdown" style="width:200px; margin-top:26px;">
                @if (CurrentlySelectedTag != null)
                {
                    @CurrentlySelectedTag.TagName
                }
                else
                {
                    <span>Tags</span>
                }
            </a>

            <ul id="tagSelectDropdown" class="dropdown-content">
                @foreach (var tag in tagService.Tags.OrderBy(x => x.TagName))
                {
                    <li class="@(string.IsNullOrEmpty(tag.TagDescription) ? "": "tooltipped")" @onclick="async _ => await SelectTag(tag)" data-position="right" data-tooltip="@tag.TagDescription"><a>@tag.TagName</a></li>
                }
            </ul>
        </div>
    </div>
}

@if (UsernamesMatchedByTag != null)
{
    <div class="row">
        <div class="col s6">
            <div class="collection">
                @foreach (var username in UsernamesMatchedByTag)
                {
                    <a class="collection-item" target="_blank" href="/userlookup/@username">@username</a>
                }
            </div>
        </div>
    </div>
}


@code {
    private AntiHarassment.Contract.Tags.TagModel CurrentlySelectedTag = null;

    private List<string> UsernamesMatchedByTag = null;

    private async Task SelectTag(AntiHarassment.Contract.Tags.TagModel tag)
    {
        CurrentlySelectedTag = tag;

        var queryParam = new AntiHarassment.Frontend.Infrastructure.QueryParam("tagId", tag.TagId.ToString());
        UsernamesMatchedByTag = await apiGateway.Get<List<string>>("UserReports", routeValues: new string[] { "tag" }, queryParams: new Infrastructure.QueryParam[] { queryParam });

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        tagService.OnChange += StateHasChanged;

        await tagService.Initialize();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeVoidAsync("InitTooltips");
        await jsRuntime.InvokeVoidAsync("InitDropDowns");
    }

    public void Dispose()
    {
        tagService.OnChange -= StateHasChanged;
    }
}
