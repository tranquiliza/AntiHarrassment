@inject IUserChannelService channelService
@inject IAdminChannelService adminChannelService
@inject IUserService userService
@implements IDisposable

@page "/settings"

<PageTitle Title="AHS: Settings" />

@if (channelService.Channel == null)
{
    <div class="row">
        <div class="col s12">
            <p>Hi! Are you also a streamer? Would like to have this system enabled for your channel?</p>
            <button @onclick="async _ => await UpdateChannelState(true)" class="btn">ENABLE SYSTEM</button>
        </div>
    </div>
    <div class="row">
        <div class="col s12">
            <p>
                If you have any questions regarding this system, you can find help at Prometheus Discord: <a target="_blank" href="https://discord.gg/Cb7PQRj">Prometheus Invite</a>
            </p>
        </div>
    </div>
}
else
{
    <AdminChannelChanger adminChannelService="adminChannelService" channelService="channelService" />

    @if (!channelService.Channel.SystemIsModerator)
    {
        <div class="row">
            <div class="col s12">
                <div class="card red darken-3">
                    <div class="card-content">
                        <span class="card-title">BE ADVISED</span>
                        <p>
                            You have not made the AntiHarassment user a moderator on your channel. <br />
                            If you wish the use features that involve usage of moderator actions like Automated Bans and Listening to AutoModded Messages, the AntiHarassment User will need moderator status in your channel!
                        </p>
                        <p>
                            If you have already granted the AntiHarassment user moderator status, please make sure to click the "I modded the bot" button!
                        </p>
                    </div>
                    <div class="card-action">
                        <a class="hand-pointer btn" @onclick="async _ => await UpdateSystemModStatus(true)">I Modded the Bot</a>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row">
        <div class="col s12">
            @if (channelService.Channel.ShouldListen)
            {
                <button @onclick="async _ => await UpdateChannelState(false)" class="btn green">System Is Active</button>
            }
            else
            {
                <button @onclick="async _ => await UpdateChannelState(true)" class="btn red">ENABLE SYSTEM</button>
            }
            @if (channelService.Channel.SystemIsModerator)
            {
                <button @onclick="async _ => await UpdateSystemModStatus(false)" class="btn green">And is Moderator</button>
            }
            else
            {
                <button @onclick="async _ => await UpdateSystemModStatus(true)" class="btn red">Bot is not Moderator</button>
            }
            @if (channelService.Channel.ShouldListenForAutoModdedMessages)
            {
                <button disabled="disabled" class="btn green">And is listening for AutoMod Messages</button>
            }
            else
            {
                <button disabled="disabled" class="btn red">AutoModded Messages Disabled</button>
            }
        </div>
    </div>

    <div class="row">
        <div class="col s12">
            <table>
                <thead>
                    <tr>
                        <th scope="col">Moderator Name</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var moderator in channelService.Channel.Moderators)
                    {
                        <tr>
                            <td>@moderator</td>
                            <td>
                                <button @onclick="async () => await RemoveModerator(moderator)" class="btn red">Remove</button>
                            </td>
                        </tr>
                    }

                    <tr>
                        <td>
                            <div class="input-field">
                                <input id="addModeratorInput" class="form-control" type="text" @bind-value="newModeratorName" />
                                <label for="addModeratorInput">Moderator Twitch Name</label>
                            </div>
                        </td>
                        <td><button @onclick="async () => await AddModerator()" class="btn green">Add</button></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private string newModeratorName = "";

    private string buttonDisable = "";

    protected async override Task OnInitializedAsync()
    {
        channelService.OnChange += StateHasChanged;
        adminChannelService.OnChange += StateHasChanged;
        userService.OnChange += StateHasChanged;

        await channelService.Initialize();
        await adminChannelService.Initialize();
    }

    private async Task AddModerator()
    {
        await channelService.AddModerator(newModeratorName);
        newModeratorName = "";
    }

    private async Task RemoveModerator(string moderatorName)
    {
        await channelService.RemoveModerator(moderatorName);
    }

    private async Task UpdateChannelState(bool shouldListen)
    {
        await channelService.UpdateChannelState(shouldListen);
    }

    private async Task UpdateSystemModStatus(bool SystemIsModerator)
    {
        await channelService.UpdateSystemModeratorState(SystemIsModerator);
    }

    public void Dispose()
    {
        channelService.OnChange -= StateHasChanged;
        adminChannelService.OnChange -= StateHasChanged;
        userService.OnChange -= StateHasChanged;
    }
}
