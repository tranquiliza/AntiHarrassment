@inject IAdminChannelService channelService
@inject IUserService userService
@implements IDisposable

@page "/admin/channels"

<AdminOnlyComponent></AdminOnlyComponent>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            @if (channelService.Channels == null)
            {
                <div class="spinner-grow" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
            else
            {
                <table class="table table-dark">
                    <thead class="thead-dark">
                        <tr>
                            <th scope="col">ChannelName</th>
                            <th scope="col">Should Listen</th>
                            <th scope="col">Is Modded</th>
                            <th scope="col">AutoMod Listener Active</th>
                        </tr>
                    </thead>
                    <tbody>

                        <tr>
                            <td><input class="form-control" type="text" @bind-value="channelModel.ChannelName" /></td>
                            <td><button @onclick="async () => await AddNewChannel()" class="btn btn-dark">Add</button></td>
                            <td></td>
                            <td></td>
                        </tr>

                        @foreach (var channel in channelService.Channels.OrderByDescending(x => x.ShouldListen).ThenBy(x => x.ChannelName))
                        {
                            <tr>
                                <td>@channel.ChannelName</td>
                                <td>
                                    @if (channel.ShouldListen)
                                    {
                                        <button class="btn btn-success" @onclick="async () => await UpdateChannel(channel.ChannelName, false)">Enabled</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-danger" @onclick="async () => await UpdateChannel(channel.ChannelName, true)">Disabled</button>
                                    }
                                </td>
                                <td>
                                    @if (channel.SystemIsModerator)
                                    {
                                        <button class="btn btn-success" @onclick="async () => await channelService.UpdateChannelSystemIsModerator(channel.ChannelName, false)">Is Moderator</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-danger" @onclick="async () => await channelService.UpdateChannelSystemIsModerator(channel.ChannelName, true)">Not Moderator</button>
                                    }
                                </td>
                                <td>
                                    @if (channel.ShouldListenForAutoModdedMessages)
                                    {
                                        <button disabled="disabled" class="btn btn-success">Listening For AutoModded</button>
                                    }
                                    else
                                    {
                                        <button disabled="disabled" class="btn btn-danger">Not Listening For AutoModded</button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>



@code {
    private ChannelModel channelModel = new ChannelModel() { ShouldListen = true };

    private async Task AddNewChannel()
    {
        if (string.IsNullOrEmpty(channelModel.ChannelName))
        {
            return;
        }

        await channelService.UpdateChannel(channelModel).ConfigureAwait(false);

        channelModel = new ChannelModel() { ShouldListen = true };
    }

    private async Task UpdateChannel(string channelName, bool newState)
    {
        var model = new ChannelModel() { ChannelName = channelName, ShouldListen = newState };
        await channelService.UpdateChannel(model).ConfigureAwait(false);
    }

    protected override async Task OnInitializedAsync()
    {
        userService.OnChange += StateHasChanged;
        channelService.OnChange += StateHasChanged;

        await channelService.Initialize();
    }

    public void Dispose()
    {
        userService.OnChange -= StateHasChanged;
        channelService.OnChange -= StateHasChanged;
    }
}
