@inject IAdminChannelService channelService
@inject IUserService userService
@implements IDisposable

@page "/admin/channels"

<AdminOnlyComponent></AdminOnlyComponent>

<div class="row">
    <div class="col-12">
        @if (channelService.Channels == null)
        {
            <Spinner />
        }
        else
        {
            <table>
                <thead>
                    <tr>
                        <th scope="col">ChannelName</th>
                        <th scope="col">Should Listen</th>
                        <th scope="col">Is Modded</th>
                        <th scope="col">AutoMod Listener Active</th>
                    </tr>
                </thead>
                <tbody>

                    <tr>
                        <td>
                            <div class="input-field">
                                <input id="channelNameInput" type="text" @bind-value="channelModel.ChannelName" />
                                <label for="channelNameInput">Channel Name</label>
                            </div>
                        </td>
                        <td><button @onclick="async () => await AddNewChannel()" class="waves-effect waves-light btn blue-grey darken-3">Add</button></td>
                        <td></td>
                        <td></td>
                    </tr>

                    @foreach (var channel in channelService.Channels.OrderByDescending(x => x.ShouldListen).ThenBy(x => x.ChannelName))
                    {
                        <tr>
                            <td>@channel.ChannelName</td>
                            <td>
                                @if (channel.ShouldListen)
                                {
                                    <button class="waves-effect waves-light btn green" @onclick="async () => await UpdateChannel(channel.ChannelName, false)">Enabled</button>
                                }
                                else
                                {
                                    <button class="waves-effect waves-light btn red" @onclick="async () => await UpdateChannel(channel.ChannelName, true)">Disabled</button>
                                }
                            </td>
                            <td>
                                @if (channel.SystemIsModerator)
                                {
                                    <button class="waves-effect waves-light btn green" @onclick="async () => await channelService.UpdateChannelSystemIsModerator(channel.ChannelName, false)">Is Moderator</button>
                                }
                                else
                                {
                                    <button class="waves-effect waves-light btn red" @onclick="async () => await channelService.UpdateChannelSystemIsModerator(channel.ChannelName, true)">Not Moderator</button>
                                }
                            </td>
                            <td>
                                @if (channel.ShouldListenForAutoModdedMessages)
                                {
                                    <button disabled="disabled" class="waves-effect waves-light btn green">Listening For AutoModded</button>
                                }
                                else
                                {
                                    <button disabled="disabled" class="waves-effect waves-light btn red">Not Listening For AutoModded</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>



@code {
    private ChannelModel channelModel = new ChannelModel() { ShouldListen = true };

    private async Task AddNewChannel()
    {
        if (string.IsNullOrEmpty(channelModel.ChannelName))
        {
            return;
        }

        await channelService.UpdateChannel(channelModel).ConfigureAwait(false);

        channelModel = new ChannelModel() { ShouldListen = true };
    }

    private async Task UpdateChannel(string channelName, bool newState)
    {
        var model = new ChannelModel() { ChannelName = channelName, ShouldListen = newState };
        await channelService.UpdateChannel(model).ConfigureAwait(false);
    }

    protected override async Task OnInitializedAsync()
    {
        userService.OnChange += StateHasChanged;
        channelService.OnChange += StateHasChanged;

        await channelService.Initialize();
    }

    public void Dispose()
    {
        userService.OnChange -= StateHasChanged;
        channelService.OnChange -= StateHasChanged;
    }
}
