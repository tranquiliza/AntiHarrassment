@inject IChannelService channelService
@inject IUserService userService
@implements IDisposable

@page "/admin/channels"

<AdminOnlyComponent></AdminOnlyComponent>

@if (channelService.Channels == null)
{
    <p>LOADING</p>
}
else
{
    <table class="table table-dark">
        <thead class="thead-dark">
            <tr>
                <th scope="col">ChannelName</th>
                <th scope="col">Should Listen</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var channel in channelService.Channels)
            {
                <tr>
                    <td>@channel.ChannelName</td>
                    <td>@channel.ShouldListen</td>
                    <td>
                        @if (channel.ShouldListen)
                        {
                            <button class="btn btn-success" @onclick="async () => await UpdateChannel(channel.ChannelName, false)">Disable</button>
                        }
                        else
                        {
                            <button class="btn btn-danger" @onclick="async () => await UpdateChannel(channel.ChannelName, true)">Enable</button>
                        }
                    </td>
                </tr>
            }

            <tr>
                <td><input type="text" @bind-value="channelModel.ChannelName" /></td>
                <td></td>
                <td><button @onclick="async () => await AddNewChannel()" class="btn btn-dark">Add</button></td>
            </tr>
        </tbody>
    </table>
}

@code {
    private ChannelModel channelModel = new ChannelModel() { ShouldListen = true };

    private async Task AddNewChannel()
    {
        if (string.IsNullOrEmpty(channelModel.ChannelName))
        {
            return;
        }

        await channelService.UpdateChannel(channelModel).ConfigureAwait(false);

        channelModel = new ChannelModel() { ShouldListen = true };
    }

    private async Task UpdateChannel(string channelName, bool newState)
    {
        var model = new ChannelModel() { ChannelName = channelName, ShouldListen = newState };
        await channelService.UpdateChannel(model).ConfigureAwait(false);
    }

    protected override async Task OnInitializedAsync()
    {
        userService.OnChange += StateHasChanged;
        channelService.OnChange += StateHasChanged;

        await channelService.Initialize();
    }

    public void Dispose()
    {
        userService.OnChange -= StateHasChanged;
        channelService.OnChange -= StateHasChanged;
    }
}
